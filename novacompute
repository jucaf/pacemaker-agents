#!/bin/sh
#
#
#	Nova Compute OCF RA. Start a remote openstack nova compute.
#
# Copyright (c) 2013 Cediant, Juan Carlos Fernandez
#                    All Rights Reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of version 2 of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# Further, this software is distributed without any warranty that it is
# free of the rightful claim of any third person regarding infringement
# or the like.  Any license provided herein, whether implied or
# otherwise, applies only to this software file.  Patent licenses, if
# any, provided herein do not apply to combinations of this program with
# other software, or any other product whatsoever.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc., 59 Temple Place - Suite 330, Boston MA 02111-1307, USA.
#

#######################################################################
# Initialization:

: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/lib/heartbeat}
. ${OCF_FUNCTIONS_DIR}/ocf-shellfuncs

#######################################################################

meta_data() {
	cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="novacompute" version="0.9">
<version>1.0</version>

<longdesc lang="en">
This is a Openstack-nova-compute Resource Agent. It starts, stops and
monitor a remote nova-compute daemon. 
</longdesc>
<shortdesc lang="en">Openstack nova compute resource agent</shortdesc>

<parameters>
<parameter name="state" unique="1">dd
<longdesc lang="en">
Location to store the resource state in.
</longdesc>
<shortdesc lang="en">State file</shortdesc>
<content type="string" default="${HA_RSCTMP}/${OCF_RESOURCE_INSTANCE}-${OCF_RESKEY_host}.state" />
</parameter>

<parameter name="host" unique="1" required="1">
<longdesc lang="en">
Compute hostname.
</longdesc>
<shortdesc lang="en">Compute hostname</shortdesc>
</parameter>

</parameters>

<actions>
<action name="start"        timeout="60" />
<action name="stop"         timeout="60" />
<action name="monitor"      timeout="20" interval="300" depth="0" />
<action name="migrate_to"   timeout="60" />
<action name="migrate_from" timeout="60" />
<action name="meta-data"    timeout="5" />
</actions>
</resource-agent>
END
}

#######################################################################

compute_usage() {
	cat <<END
usage: $0 {start|stop|monitor|migrate_to|migrate_from|validate-all|meta-data}

Expects to have a fully populated OCF RA-compliant environment set.
END
}

compute_start() {
    compute_monitor
    RETVAL=$?
    if [ $RETVAL =  $OCF_NOT_RUNNING ]; then
	ssh ${OCF_RESKEY_host} 'service openstack-nova-compute start' &>/dev/null
	[ $? -ne 0 ] && return ${OCF_ERR_GENERIC}
        touch ${OCF_RESKEY_state}
	return $OCF_SUCCESS
    fi
    return $RETVAL
}

compute_stop() {
    compute_monitor
    RETVAL=$?
    if [ $RETVAL =  $OCF_SUCCESS ]; then
        ssh $OCF_RESKEY_host 'service openstack-nova-compute stop' &>/dev/null
	rm ${OCF_RESKEY_state}
	[ $? -ne 0 ] && return ${OCF_ERR_GENERIC}
    fi
    return $OCF_SUCCESS
}

compute_monitor() {
	# Monitor _MUST!_ differentiate correctly between running
	# (SUCCESS), failed (ERROR) or _cleanly_ stopped (NOT RUNNING).
	# That is THREE states, not just yes/no.
	STATUS=`nova-manage service list |grep ${OCF_RESKEY_host} | grep nova-compute | sed 's/ \+/ /g'| cut -d ' ' -f5`
	[[ ! -z "${STATUS}" && "${STATUS}" == ':-)' ]] && return ${OCF_SUCCESS}
	[ -f ${OCF_RESKEY_state} ] && return $OCF_ERR_GENERIC
	return $OCF_NOT_RUNNING
}

#dummy_validate() {
    
    # Is the state directory writable? 
#    state_dir=`dirname "$OCF_RESKEY_state"`
#    touch "$state_dir/$$"
#    if [ $? != 0 ]; then
#	return $OCF_ERR_ARGS
#    fi
#    rm "$state_dir/$$"
#
#    return $OCF_SUCCESS
#}

: ${OCF_RESKEY_state=${HA_RSCTMP}/${OCF_RESOURCE_INSTANCE}-${OCF_RESKEY_host}.state}

case $__OCF_ACTION in
meta-data)	meta_data
		exit $OCF_SUCCESS
		;;
start)		compute_start;;
stop)		compute_stop;;
monitor)	compute_monitor;;
migrate_to)	ocf_log info "Migrating ${OCF_RESOURCE_INSTANCE} to ${OCF_RESKEY_CRM_meta_migrate_target}."
	        compute_stop
		;;
migrate_from)	ocf_log info "Migrating ${OCF_RESOURCE_INSTANCE} from ${OCF_RESKEY_CRM_meta_migrate_source}."
	        compute_start
		;;
reload)		ocf_log info "Reloading ${OCF_RESOURCE_INSTANCE} ..."
		;;
usage|help)	compute_usage
		exit $OCF_SUCCESS
		;;
*)		compute_usage
		exit $OCF_ERR_UNIMPLEMENTED
		;;
esac
rc=$?
ocf_log debug "${OCF_RESOURCE_INSTANCE} $__OCF_ACTION : $rc"
exit $rc

